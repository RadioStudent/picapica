// Generated by CoffeeScript 2.6.1
(function() {
  module.exports = function($rootScope, $q, _, CurrentTrackList, TrackList, TrackListSync, Terms, $filter, $routeParams, $scope, Authorization, $location, $uibModal) {
    var PlaylistController;
    return new (PlaylistController = class PlaylistController {
      constructor() {
        this.handleSuccess = this.handleSuccess.bind(this);
        //@trackLists = TrackList.query () => @loaders.save = off
        this.handleError = this.handleError.bind(this);
        this.refresh = this.refresh.bind(this);
        this.getTotalDuration = this.getTotalDuration.bind(this);
        this.resetMetadata = this.resetMetadata.bind(this);
        this.addMp3Track = this.addMp3Track.bind(this);
        // Copy playlist text to clipboard
        this.copyClipboard = this.copyClipboard.bind(this);
        this.trackList = CurrentTrackList;
        this.trackLists = TrackList.query();
        this.loaders = {
          save: false
        };
        this.RTerms = Terms;
        this.$location = $location;
        this.printMetadata = {
          author: '',
          date: '',
          term: ''
        };
        this.datepicker = {
          options: {
            formatYear: 'yy',
            startingDay: 1
          },
          format: 'yyyy-MM-dd',
          opened: false,
          open: () => {
            return this.datepicker.opened = true;
          }
        };
        $rootScope.$on('tracklist.update', this.refresh);
        if ($routeParams.tracklistId) {
          this.trackList.id = $routeParams.tracklistId;
          this.loadTrackList();
        }
        $scope.haveRole = Authorization.haveRole;
        $scope.getJoined = (prop) => {
          return prop.map((label) => {
            return label.name;
          }).join(', ');
        };
        return;
      }

      formatDate(isoString) {
        var dateObject, dateString;
        dateObject = new Date(isoString);
        dateString = dateObject.getDate() + '. ' + (dateObject.getMonth() + 1) + '. ' + dateObject.getFullYear();
        return dateString;
      }

      loadTrackList() {
        if (this.trackList.id === '-1') {
          this.trackList.reset();
          return this.refresh();
        } else {
          if (!this.trackList.id) {
            return;
          }
          return TrackList.get({
            id: this.trackList.id
          }, (newTrackList) => {
            _.assign(this.trackList, newTrackList);
            this.$location.update_path('/playlist/' + newTrackList.id, true);
            return this.refresh();
          });
        }
      }

      save() {
        this.loaders.save = true;
        return this.trackList.save().$promise.then(this.handleSuccess, this.handleError);
      }

      handleSuccess() {
        this.loaders.save = false;
        return this.refresh();
      }

      handleError(resp) {
        this.loaders.save = false;
        if (resp.data[0]) {
          return alert('Napaka pri shranjevanju: ' + resp.data[0].error.message);
        } else if (resp.data.error) {
          return alert('Napaka pri shranjevanju: ' + resp.data.error.message);
        } else {
          return alert('Napaka pri shranjevanju');
        }
      }

      refresh() {
        // Refresh duration meter at the bottom
        this.totalDuration = _.map(this.trackList.tracks, 'duration').filter(Number).reduce((function(a, b) {
          return a + b;
        }), 0);
        return Terms.$promise.then(() => {
          return this.resetMetadata();
        });
      }

      getTotalDuration() {
        return _.map(this.trackList.tracks, 'duration').filter(Number).reduce((function(a, b) {
          return a + b;
        }), 0);
      }

      resetMetadata() {
        var term;
        term = _.find(Terms, {
          id: this.trackList.termId
        });
        return this.printMetadata = {
          author: this.trackList.authorName,
          date: this.formatDate(this.trackList.date),
          term: term.time + ' (' + term.name + ')',
          duration: $filter('duration')(this.getTotalDuration())
        };
      }

      addMp3Track() {
        return this.trackList.tracks.push({
          mp3: true,
          duration: 0
        });
      }

      copyClipboard() {
        var clipboard, reduceTrack, text;
        reduceTrack = (longText, track, idx) => {
          var data, trackTxt;
          data = [idx + 1 + " " + track.fid, track.artistName, track.name, track.albumName, track.year, $filter('duration')(track.duration)].map((val) => {
            if (val) {
              return val;
            } else {
              return "/";
            }
          });
          trackTxt = data.join("\t");
          if (track.comment) {
            trackTxt += "\n\t" + track.comment;
          }
          return longText + trackTxt + "\n";
        };
        text = this.trackList.tracks.reduce(reduceTrack, "");
        text = ['# FID', 'ARTIST', 'TITLE', 'ALBUM', 'YEAR', 'LENGTH'].join("\t") + "\n" + text;
        clipboard = document.getElementById('clipboard-container');
        clipboard.innerHTML = text;
        clipboard.select();
        clipboard.focus();
        return document.execCommand("copy");
      }

      triggerPrint() {
        return window.print();
      }

      syncToWebsite() {
        var trackList;
        trackList = this.trackList;
        return $uibModal.open({
          animation: true,
          size: 'md',
          templateUrl: 'partials/playlist-sync-modal.tpl.html',
          controller: function($scope) {
            $scope.trackList = trackList;
            $scope.duration = $filter('duration');
            return $scope.syncPlaylist = function() {
              var payload, sync, syncError, syncSuccess;
              payload = document.getElementById('tracklist-sync').outerHTML;
              payload += "<p>\n<br>\n</p>";
              sync = new TrackListSync({
                id: trackList.id,
                body: payload
              });
              syncError = function() {
                return alert('There was an error syncing to website');
              };
              syncSuccess = function(resp) {
                var link;
                if (!resp.success) {
                  alert('There was an error syncing to website');
                  return;
                }
                trackList.syncNodeId = parseInt(resp.nid);
                $scope.hideIntro = true;
                link = 'Prispevek na sajtu uspešno ustvarjen. Obiščeš ga lahko <a href="https://radiostudent.si/node/' + resp.nid + '" target="_blank">tukaj</a>.';
                return document.getElementById('tracklist-sync').outerHTML = link;
              };
              if (trackList.syncNodeId) {
                if (confirm('Prispevek na spletni strani že obstaja. Ga želiš prepisati?')) {
                  return sync.$save(syncSuccess, syncError);
                }
              } else {
                return sync.$save(syncSuccess, syncError);
              }
            };
          }
        });
      }

    })();
  };

}).call(this);
